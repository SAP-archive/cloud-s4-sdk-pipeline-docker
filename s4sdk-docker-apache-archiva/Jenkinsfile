@Library(['piper-pipeline-library', 's4sdk-pipeline-library']) _

def dockerImage = null

try {
    node {
        stage('Build') {
            milestone 10
            deleteDir()
            checkout scm

            setupPipelineEnvironment script: this, storeGithubStatistics: false
            setVersion script: this, buildTool: 'docker', gitCommitId: '', dockerVersionSource: 'FROM', gitExecute: false

            stash name: 'Dockerfile', includes: 'Dockerfile'

            dockerImage = docker.build(globalPipelineEnvironment.getConfigProperty('dockerImageName'), '--pull --build-arg http_proxy=http://proxy.wdf.sap.corp:8080 --build-arg https_proxy=http://proxy.wdf.sap.corp:8080 --build-arg no_proxy=localhost,*.sap.corp,*.corp.sap,.sap.corp,.corp.sap,10.19.* .')
        }
        stage('Archive OS Sources') {
                executeDockerNative(dockerImage: 'samepagelabs/zip') {
                    sh 'zip -r s4sdk-docker-apache-archiva.zip Dockerfile'
                    archive includes: 's4sdk-docker-apache-archiva.zip'
                }
            }
        stage('Test') {
            executeBatsTests outputFormat: 'junit', failOnError: false, dockerImageNameAndTag: globalPipelineEnvironment.getConfigProperty('dockerImageName'), dockerContainerName: 'test-docker-neo-cli'
            publishTestResults junit: [pattern: '**/TestReport*.xml', archive: true]
        }
    }

    def branch = env.BRANCH_NAME
    if (branch == null) error "Could not determine branch"
    if (branch != 'master') return 0

    stage('Promote') {
        milestone 20
        node {
            deleteDir()
            unstash 'Dockerfile'

            docker.withRegistry(globalPipelineEnvironment.getConfigProperty('dockerRegistry'), globalPipelineEnvironment.getConfigProperty('dockerCredentials')) {
                dockerImage.push('latest')
                dockerImage.push(globalPipelineEnvironment.getArtifactVersion())
            }
            currentBuild.result = 'SUCCESS'
        }
    }
} catch (err) {
    node {
        globalPipelineEnvironment.addError(this, err)
        throw err
    }
} finally {
    node {
        sendNotificationMail script: this, notificationRecipients: globalPipelineEnvironment.getConfigProperty('mailReceipients')
    }
}